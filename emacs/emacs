; {{{ ELPA
(package-initialize)

(add-to-list 'package-archives '("ELPA"      . "http://tromey.com/elpa/"))
(add-to-list 'package-archives '("gnu"       . "http://elpa.gnu.org/packages/"))
(add-to-list 'package-archives '("marmalade" . "http://marmalade-repo.org/packages/"))
; }}}

; {{{ Movement
(global-set-key (kbd "ESC <left>")   'beginning-of-line)
(global-set-key (kbd "ESC <right>")  'end-of-line)
(global-set-key (kbd "ESC <C-up>")   'beginning-of-buffer)
(global-set-key (kbd "ESC <C-down>") 'end-of-buffer)

(global-set-key (kbd "C-g")          'goto-line)
(global-set-key (kbd "M-g")          'ace-jump-mode)
; }}}

; {{{ Scroll
(setq-default scroll-step 1)
(setq-default scroll-margin 7)
(setq-default scroll-conservatively 100000)
(setq-default scroll-preserve-screen-position t)

(global-set-key (kbd "M-m")          'recenter)
; }}}

; {{{ Selection
(whole-line-or-region-mode 1)
(global-hl-line-mode 1)

(set-face-background 'hl-line "#001")
(set-face-background 'region  "#100")

(setq cua-enable-cua-keys nil)
(cua-mode t)

(global-set-key (kbd "M-SPC")       'cua-set-rectangle-mark)
(global-set-key (kbd "C-a")         'mark-whole-buffer)
(global-set-key (kbd "M-c")         'whole-line-or-region-comment-dwim)
; }}}

; {{{ Line manipulation
(defun duplicate-line (arg)
  "Duplicate current line, leaving point in lower line."
  (interactive "*p")

  ;; save the point for undo
  (setq buffer-undo-list (cons (point) buffer-undo-list))

  ;; local variables for start and end of line
  (let ((bol (save-excursion (beginning-of-line) (point)))
        eol)
    (save-excursion

      ;; don't use forward-line for this, because you would have
      ;; to check whether you are at the end of the buffer
      (end-of-line)
      (setq eol (point))

      ;; store the line and disable the recording of undo information
      (let ((line (buffer-substring bol eol))
            (buffer-undo-list t)
            (count arg))
        ;; insert the line arg times
        (while (> count 0)
          (newline)         ;; because there is no newline in 'line'
          (insert line)
          (setq count (1- count)))
        )

      ;; create the undo information
      (setq buffer-undo-list (cons (cons eol (point)) buffer-undo-list)))
    ) ; end-of-let

  ;; put the point in the lowest line and return
  (next-line arg))

(global-set-key (kbd "ESC <up>")   'move-text-up)
(global-set-key (kbd "ESC <down>") 'move-text-down)
(global-set-key (kbd "M-d")        'duplicate-line)
; }}}

; {{{ Kill ring & clipboard
(global-set-key (kbd "C-v")                'whole-line-or-region-yank)
(global-set-key (kbd "M-v")                'browse-kill-ring)
(global-set-key (kbd "C-c")                'whole-line-or-region-kill-ring-save)
(global-set-key (kbd "<C-delete>")         'paredit-forward-kill-word)
(global-set-key (kbd "ESC <deletechar>")   'whole-line-or-region-kill-region)
(global-set-key (kbd "ESC <C-delete>")     'paredit-kill)
;(global-set-key (kbd "ESC <C-delete>")     'kill-line)
; }}}


; {{{ Undo
(global-undo-tree-mode 1)
(global-set-key (kbd "C-z") 'undo-tree-undo)
(global-set-key (kbd "C-y") 'undo-tree-redo)
(global-set-key (kbd "M-z") 'undo-tree-visualize)
; }}}

; {{{ Tabs & indentation
(defun clean ()
    "Clean and indent whole buffer"
    (interactive)
    (delete-trailing-whitespace)
    ;(indent-region (point-min) (point-max) nil)
    (untabify (point-min) (point-max)))

(setq-default tab-width 4)
;(setq-default standard-indent 4)
(setq-default indent-tabs-mode nil)

(global-set-key (kbd "<return>")    'newline-and-indent)
(global-set-key (kbd "TAB")         'indent-or-expand)
(global-set-key (kbd "M-i")         'indent-region)
(global-set-key (kbd "M-a")         'align-regexp)
; }}}

; {{{ Search & replace
(setq search-highlight t)
(setq query-replace-highlight t)

;(global-set-key (kbd "C-f")         'isearch-forward)
;(global-set-key (kbd "C-S-f")       'isearch-backward)

(when (require 'loccur)
    (global-set-key (kbd "C-f")         'loccur))
(global-set-key (kbd "M-f")         'multi-occur)
(global-set-key (kbd "C-n")         'next-error)
(global-set-key (kbd "C-p")         'previous-error)

(define-key isearch-mode-map (kbd "C-f")   'isearch-repeat-forward)
(define-key isearch-mode-map (kbd "C-S-f") 'isearch-repeat-backward)
(define-key isearch-mode-map (kbd "C-s")   'save-buffer)
(define-key isearch-mode-map (kbd "C-S-s") 'write-file)

(global-set-key (kbd "C-r")         'iedit-mode)
;; (global-set-key (kbd "M-r")         'replace-string)
(global-set-key (kbd "M-r")         'query-replace)
; }}}

; {{{ Buffer manipulation
(defun kill-current-buffer ()
    (interactive)
    (kill-buffer (current-buffer)))

;; (when (require 'buffer-move)
;;     (global-set-key (kbd "ESC C-<up>")    'buf-move-up)
;;     (global-set-key (kbd "ESC C-<down>")  'buf-move-down)
;;     (global-set-key (kbd "ESC C-<left>")  'buf-move-left)
;;     (global-set-key (kbd "ESC C-<right>") 'buf-move-right))

(global-set-key (kbd "C-<prior>")     'bs-cycle-previous)
(global-set-key (kbd "C-<next>")      'bs-cycle-next)
(global-set-key (kbd "C-b")           'ido-switch-buffer)
;; (global-set-key (kbd "C-d")           'split-window)
;(global-set-key (kbd "M-<tab>")       'other-window)
;(global-set-key (kbd "C-w")         'delete-other-windows)
; }}}

; {{{ Session
;(global-set-key (kbd "C-q")         'save-buffers-kill-terminal)
;(global-set-key (kbd "C-q")         'kill-current-buffer)
(global-set-key (kbd "C-q")         'server-edit)
(global-set-key (kbd "ESC <f4>")    'kill-emacs)
(global-set-key (kbd "C-s")         'save-buffer)
(global-set-key (kbd "M-s")         'ido-write-file)
;(global-set-key (kbd "<escape>")    'keyboard-quit)
; }}}

; {{{ Interaction
(smex-initialize)
(global-set-key (kbd "M-x") 'smex)
; }}}

; Mutt
(add-to-list 'auto-mode-alist '("/mutt" . mail-mode))

; {{{ Dired
(eval-after-load "dired" '(progn
(defun dired-execute nil
  "Try to execute file at point."
  (interactive)
  (shell-command (dired-get-filename)))

(setq dired-listing-switches "-lh --group-directories-first")
(setq image-dired-external-viewer "mirage")
(setq dired-auto-revert-buffer t)
(setq dired-recursive-deletes t)
(setq dired-recursive-copies t)
;;     (put 'dired-find-alternate-file 'disabled nil)

(define-key dired-mode-map (kbd "<f5>")        'revert-buffer)

(define-key dired-mode-map (kbd "r")           'dired-do-rename)
(define-key dired-mode-map (kbd "x")           'dired-do-flagged-delete)
;(define-key dired-mode-map (kbd "X")           'dired-do-flagged-delete)
(define-key dired-mode-map (kbd "c")           'dired-do-copy)
(define-key dired-mode-map (kbd "C")           'dired-do-copy-regexp)
(define-key dired-mode-map (kbd "m")           'dired-do-rename)
(define-key dired-mode-map (kbd "M")           'dired-do-rename-regexp)
(define-key dired-mode-map (kbd "p")           'dired-display-file)
(define-key dired-mode-map (kbd "l")           'dired-do-symlink)
(define-key dired-mode-map (kbd "h")           'dired-do-chmod)
(define-key dired-mode-map (kbd "g")           'dired-do-chgrp)
(define-key dired-mode-map (kbd "t")           'dired-do-touch)
(define-key dired-mode-map (kbd "z")           'dired-do-compress)
(define-key dired-mode-map (kbd "<deletechar>") 'dired-do-kill-lines)
(define-key dired-mode-map (kbd "<return>")    'dired-find-alternate-file)

(define-key dired-mode-map (kbd "SPC")         'dired-mark)
(define-key dired-mode-map (kbd "TAB")         'dired-toggle-marks)
(define-key dired-mode-map (kbd "C-a")         'dired-mark-subdir-files)
(define-key dired-mode-map (kbd "* *")         'dired-mark-subdir-files)
(define-key dired-mode-map (kbd "* x")         'dired-mark-executables)
;(define-key dired-mode-map (kbd "C-@")         'dired-flag-files-regexp)
(define-key dired-mode-map (kbd "C-@")         'dired-mark-files-regexp)
;(define-key dired-mode-map (kbd "!")         'dired-flag-files-regexp)
(define-key dired-mode-map (kbd "C-n")         'dired-next-marked-file)
(define-key dired-mode-map (kbd "C-p")         'dired-prev-marked-file)
(define-key dired-mode-map (kbd "D")           'dired-do-delete)

(define-key dired-mode-map (kbd "DEL")         'dired-up-directory)
(define-key dired-mode-map (kbd "/")           'dired-isearch-filenames-regexp)))
; }}}

(add-hook 'after-save-hook 'executable-make-buffer-file-executable-if-script-p)

; {{{ Server
(defun server-shutdown ()
    "Save buffers, quit, and shutdown (kill) server"
    (interactive)
    (save-some-buffers)
    (kill-emacs))

(add-hook 'server-done-hook 'delete-frame)
(add-hook 'server-done-hook (lambda nil (kill-buffer nil)))
; }}}

; Display
(setq-default show-trailing-whitespace t)

; Highlight parenthesis
(when (require 'rainbow-delimiters nil 'noerror)
    (global-rainbow-delimiters-mode 1))
(show-paren-mode t)

; Misc
(setq vc-follow-symlinks t)
(fset 'yes-or-no-p 'y-or-n-p)
(setq require-final-newline t)
;(setq ring-bell-function 'ignore)
(setq inhibit-startup-screen t)

; Minor modes
(delete-selection-mode 1)
(file-name-shadow-mode 1)
;(icomplete-mode 1)
(menu-bar-mode -1)
(paredit-mode t)
(savehist-mode 1)
(size-indication-mode t)
;(tabbar-mode 1)
(which-function-mode 1)

; {{{ Eldoc
(add-hook 'emacs-lisp-mode-hook       'turn-on-eldoc-mode)
(add-hook 'lisp-interaction-mode-hook 'turn-on-eldoc-mode)
(add-hook 'ielm-mode-hook             'turn-on-eldoc-mode)
(add-hook 'c-mode-hook                'c-turn-on-eldoc-mode)
; }}}

; {{{ Syntax highlight
(setq font-lock-maximum-decoration t)
(global-set-key (kbd "M-h") 'font-lock-mode)
; }}}

; {{{ Completion
(defun indent-or-expand ()
  (interactive)
  (if (and
       (or (bobp) (= ?w (char-syntax (char-before))))
       (or (eobp) (not (= ?w (char-syntax (char-after))))))
      ;(dabbrev-expand nil)
       (hippie-expand nil)
    (indent-according-to-mode)))

(setq dabbrev-abbrev-skip-leading-regexp "[=*]")
(setq hippie-expand-dabbrev-as-symbol nil)
;(setq completion-cycle-threshold t)
;(setq completion-ignore-case t)
;(setq read-file-name-completion-ignore-case t)
; }}}

; {{{ Backup files
(setq backup-directory-alist         `((".*" . "~/.cache/emacs")))
(setq auto-save-file-name-transforms `((".*" "~/.cache/emacs" t)))
; }}}

; Diff
(setq ediff-window-setup-function 'ediff-setup-windows-plain)
;(global-highlight-changes-mode t)
;(setq highlight-changes-visibility-initial-state nil)

;(set-face-foreground 'highlight-changes nil)
;(set-face-background 'highlight-changes "#007700")
;(set-face-foreground 'highlight-changes-delete nil)
;(set-face-background 'highlight-changes-delete "#770000")
;
;(global-set-key (kbd "C-d")       'highlight-changes-visible-mode)
;(global-set-key (kbd "M-<next>")  'highlight-changes-next-change)
;(global-set-key (kbd "M-<prior>") 'highlight-changes-previous-change)

; linum
;(global-linum-mode 1)
(setq linum-format "%d ")
(global-set-key (kbd "C-l")         'linum-mode)

;(require 'tabbar)

; uniquify
(when (require 'uniquify nil 'noerror)
    (setq uniquify-separator "|")
    (setq uniquify-buffer-name-style 'reverse))

; saveplace
(when (require 'saveplace nil 'noerror)
    (setq save-place-file "~/.config/emacs/saveplace")
    (setq-default save-place t))

; {{{ yasnippets
;(autoload 'yas/expand "yasnippet" "Completion snippets" t)
;(eval-after-load "yasnippet" '(progn
;    (yas/load-directory "~/.emacs.d/elpa/yasnippet-0.6.1/snippets")
;    (yas/global-mode 1)))

;(global-set-key (kbd "<tab>") 'yas/expand)
; }}}

; {{{ Autopair
(when (require 'autopair)
    (setq autopair-autowrap t)
    (autopair-global-mode 1))
; }}}

; {{{ ido
(when (require 'ido nil 'noerror)
    (ido-mode 'both)
    (ido-everywhere 1)

    (setq ido-create-new-buffer 'never)
    (setq ido-enable-tramp-completion nil)

    (setq ido-enable-last-directory-history t)
    (setq ido-max-work-directory-list  30)
    (setq ido-max-work-file-list       50)
    (setq ido-save-directory-list-file "~/.config/emacs/ido.last")

    ;(setq ido-ignore-extensions t)
    ;(setq ido-ignore-buffers '("\\` " "^\*Mess" "^\*Back" ".*Completion" "^\*Ido" "^\*trace" "^\*compilation" "^\*GTAGS" "^session\.*" "^\*"))

    (setq ido-work-directory-list '("~/"))

    (setq ido-case-fold             t)
    (setq ido-use-filename-at-point nil)
    (setq ido-use-url-at-point      nil)
    (setq ido-enable-flex-matching  t)
    (setq ido-max-prospects         8)
    (setq ido-confirm-unique-completion t)
    (setq confirm-nonexistent-file-or-buffer nil))

(global-set-key (kbd "C-o") 'find-file)
;(global-set-key (kbd "C-w") 'ido-kill-buffer)
; }}}


; {{{ Language-based modes
; Haskell
;(add-to-list 'load-path "~/.emacs.d/elpa/haskell-mode-2.8.0")
;(autoload 'haskell-mode          "haskell-mode" "Major mode for editing Haskell scripts." t)
;(autoload 'literate-haskell-mode "haskell-mode" "Major mode for editing literate Haskell scripts." t)

;(add-hook 'haskell-mode-hook 'turn-on-haskell-doc-mode)
;(add-hook 'haskell-mode-hook 'turn-on-haskell-indentation)
;;(add-hook 'haskell-mode-hook 'turn-on-haskell-indent)
;;(add-hook 'haskell-mode-hook 'turn-on-haskell-simple-indent)

;(setq auto-mode-alist (append auto-mode-alist '(
;    ("\\.[hg]s$"  . haskell-mode)
;    ("\\.hic?$"   . haskell-mode)
;    ("\\.hsc$"    . haskell-mode)
;    ("\\.chs$"    . haskell-mode)
;    ("\\.l[hg]s$" . literate-haskell-mode))))

; PKGBUILD
(autoload 'pkgbuild-mode "pkgbuild-mode.el" "PKGBUILD mode." t)
(setq auto-mode-alist (append '(("/PKGBUILD$" . pkgbuild-mode)) auto-mode-alist))

; Python
;(autoload 'python-mode "python-mode.el" "Python mode." t)
;(setq auto-mode-alist (append '(("/*.\.py$" . python-mode)) auto-mode-alist))

; C/C++/Java
;(setq c-default-style '(
;    (java-mode . "java")
;    (awk-mode .  "awk")
;    (other .     "linux")))

;(setq         c-indent-level 4)             ; TAB = 4 spaces
;(setq-default c-basic-offset 4)             ; Indentation unit
;(setq-default c-toggle-electric-flag nil)

(add-hook 'c-mode-common-hook (lambda ()
    (font-lock-add-keywords nil '(("\\<\\(FIXME\\|TODO\\|BUG\\):" 1 font-lock-warning-face t)))))

; Shell script
(setq auto-mode-alist (append '(("\.bashrc$" . shell-script-mode)) auto-mode-alist))
(setq auto-mode-alist (append '(("\.profile$" . shell-script-mode)) auto-mode-alist))
; }}}

; {{{ Term mode
;(require 'cl)
;(require 'term)
(add-to-list 'load-path "/home/chahine/.emacs.d/elpa/multi-term-0.8.8")
(autoload 'multi-term "multi-term" nil t)
(eval-after-load "multi-term" '(progn
    (setq multi-term-program "/bin/bash")
    (setq multi-term-scroll-to-bottom-on-output "this")))
; }}}

; Windows movement
;(when (require 'windmove nil 'noerror)
;    (windmove-default-keybindings 'meta))


; {{{ Modeline
(set-face-background 'modeline "#111")
(set-face-foreground 'modeline "#aaaaff")
(setq-default mode-line-format (list
    ;; insert vs overwrite mode, input-method in a tooltip
    " " '(:eval (propertize (if overwrite-mode "Ovr" "Ins")
            'face 'font-lock-preprocessor-face
            'help-echo (concat "Buffer is in " (if overwrite-mode "overwrite" "insert") " mode")))

    ;; was this buffer modified since the last save?
    '(:eval (when (buffer-modified-p)
              (concat ","  (propertize "Mod" 'face 'font-lock-warning-face))))

    ;; is this buffer read-only?
    '(:eval (when buffer-read-only
              (concat ","  (propertize "RO" 'face 'font-lock-type-face))))

    ; the buffer name; the file name as a tool tip
    " | " (propertize "%b " 'face 'font-lock-keyword-face)

    ; line and column
    " | " (propertize "%04l" 'face 'font-lock-type-face)
    "," (propertize "%03c" 'face 'font-lock-type-face)

    ; relative position, size of file
    " | " (propertize "%p" 'face 'font-lock-type-face)
    "/" (propertize "%I" 'face 'font-lock-constant-face)

    ; the current major mode for the buffer.
    " | " (propertize "%m" 'face 'font-lock-string-face)
    " /" minor-mode-alist

    " | %Z %e %[ %-"))
; }}}

; {{{ Keys
(global-set-key (kbd "<f11>")       'compile)
(global-set-key (kbd "<f12>")       'multi-term)
; }}}

; {{{ IDE
(setq compilation-ask-about-save nil)
(setq compilation-save-buffers-predicate '(lambda () nil))
; }}}

; {{{ GUI
;(scroll-bar-mode -1)
;(tool-bar-mode -1)

;(add-to-list 'default-frame-alist '(font . "Consolas-10"))

; Colors
;(add-to-list 'load-path "~/.emacs.d/elpa/color-theme-6.6.1")
;(require 'color-theme)
;(load "~/.emacs.d/elpa/color-theme-blackboard-0.0.2/color-theme-blackboard.el")

;(setq color-theme-is-global nil)
;(color-theme-blackboard)

;(defun apply-color-theme (frame)
;    (select-frame frame)
;    (if (display-graphic-p frame) (color-theme-blackboard) (color-theme-tty-dark)))
;(add-hook 'after-make-frame-functions 'color-theme-blackboard)

;(setq frame-background-mode nil)
;(invert-face 'default)

;(set-frame-parameter (selected-frame) 'alpha '(85 50))
;(add-to-list 'default-frame-alist '(alpha 85 50))
; }}}

; {{{ Hooks
(add-hook 'after-save-hook 'executable-make-buffer-file-executable-if-script-p)
(add-hook 'before-save-hook 'whitespace-cleanup)
; }}}
