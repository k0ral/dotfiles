(require 'cl-lib)

;; {{{ ELPA
(setq-default package-archives '(("melpa-stable" . "http://stable.melpa.org/packages/")
                                 ("melpa"        . "http://melpa.org/packages/")
                                 ("gnu"          . "http://elpa.gnu.org/packages/")
                                 ("marmalade"    . "http://marmalade-repo.org/packages/") ))

(package-initialize)
(setq package-enable-at-startup nil)
;; (global-set-key (kbd "M-p") 'list-packages)
;; }}}

;; {{{ use-package
(eval-when-compile (require 'use-package))
(require 'bind-key)                ;; if you use any :bind variant

(setq use-package-always-ensure t)
;; }}}

;; {{{ Minor modes
(delete-selection-mode 1)
(electric-indent-mode 1)
(file-name-shadow-mode 1)
(global-auto-revert-mode t)
(global-hl-line-mode 1)
;; (global-linum-mode 1)
(global-subword-mode 1)
(global-visual-line-mode 1)
;; (icomplete-mode 1)
(menu-bar-mode -1)
(recentf-mode 1)
(savehist-mode 1)
(scroll-bar-mode -1)
(size-indication-mode t)
(show-paren-mode 1)
(tool-bar-mode -1)
(which-function-mode 1)
;; }}}

(use-package avy
  :bind ("M-g" . avy-goto-word-1) )

(use-package adaptive-wrap
  :ensure t
  :init (add-hook 'visual-line-mode-hook 'adaptive-wrap-prefix-mode) )

(use-package browse-kill-ring
  :bind ("M-v" . browse-kill-ring) )

(use-package c-eldoc
  :init
  (add-hook 'c-mode-hook 'c-turn-on-eldoc-mode) )

(use-package counsel
  :bind (("<f1> f" . counsel-describe-function)
         ("<f1> v" . counsel-describe-variable)
         ("C-o"    . counsel-find-file)
         ("M-x"    . counsel-M-x) ) )

(use-package expand-region
  :bind ("C-S-SPC" . er/expand-region) )

(use-package golden-ratio
  :init
  (setq golden-ratio-auto-scale t)
  (setq golden-ratio-exclude-modes '("ediff-mode"))
  :config
  (golden-ratio-mode 1) )

(use-package flycheck
  :config
  (add-hook 'after-init-hook #'global-flycheck-mode)
  (use-package flycheck-haskell
    :config
    (add-hook 'flycheck-mode-hook #'flycheck-haskell-setup) )
  )

(use-package guide-key
  :init
  (setq-default
    guide-key/guide-key-sequence '("C-x" "C-c p")
    guide-key/idle-delay 0.1
    guide-key/recursive-key-sequence-flag t )
  :config
  (guide-key-mode 1) )

(use-package haskell-mode
  :mode "\.chs$"
  :init (progn
    (add-hook 'haskell-mode-hook 'turn-on-eldoc-mode)
    (add-hook 'haskell-mode-hook 'turn-on-haskell-indentation)
    ;; (add-hook 'haskell-mode-hook 'turn-on-haskell-unicode-input-method)
    ;; hs-minor-mode

    (setq-default
        haskell-stylish-on-save t
        ;; haskell-tags-on-save    t
        haskell-indent-spaces   4 ) ) )

(use-package highlight-symbol
  :bind (("C-h" . highlight-symbol-at-point)
         ("M-n" . highlight-symbol-next)
         ("M-p" . highlight-symbol-prev) )
  :config
  (highlight-symbol-mode 1) )

(use-package idomenu
  :bind (("C-b" . ido-switch-buffer)
         ("M-s" . ido-write-file) )
         ;; ("C-w" . ido-kill-buffer)
  :config
  (ido-mode 'both)
  (ido-everywhere 1)

  (use-package flx-ido
    :config
    (flx-ido-mode 1) )

  (defadvice ido-find-file (after find-file-sudo activate)
    "Find file as root if necessary."
    (unless (and buffer-file-name
                 (file-writable-p buffer-file-name))
      (find-alternate-file (concat "/sudo:root@localhost:" buffer-file-name))))

  (setq-default
    ido-auto-merge-work-directories-length -1 ; Do not try to find a file outside current directory in case given filename matches nothing; just open a new file!
    ido-create-new-buffer                  'never
    ido-case-fold                          t
    ido-confirm-unique-completion          t
    ido-decorations                        '(" {" "}" " | " " | ..." " [" "]" " [No match]" " [Matched]" " [Not readable]" " [Too big]" " [Confirm]")
    ido-enable-flex-matching               t
    ido-enable-last-directory-history      nil
    ido-ignore-buffers                '("\\` " "^\*Mess" "^\*Back" ".*Completion" "^\*Ido" "^\*trace" "^\*compilation" "^\*GTAGS" "^session\.*" "^\*")
    ido-save-directory-list-file      "~/.config/emacs/ido.last"
    ido-use-faces                          nil
    ido-use-filename-at-point              nil
    ido-use-url-at-point                   nil
    ido-work-directory-list                '("~/")
    ) )

(use-package iedit
  :bind (("M-SPC" . iedit-rectangle-mode)
         ("C-r"   . iedit-mode) ) )

(use-package paredit
  :bind ("<C-M-delete>" . paredit-kill)
  :config
  (paredit-mode t) )

(use-package projectile
  :config
  (projectile-global-mode) )

(use-package rainbow-delimiters
  :init
  (add-hook 'prog-mode-hook 'rainbow-delimiters-mode) )

(use-package rich-minority
  :config
  (rich-minority-mode 1)
  (setq rm-blacklist "")
)

(use-package shrink-whitespace
  :bind ("<C-S-delete>" . shrink-whitespace) )

(use-package smart-cursor-color
  :config
  (smart-cursor-color-mode 1) )

(use-package swiper
  :bind ("C-f" . swiper) )

(use-package undo-tree
  :bind (("C-z" . undo-tree-undo)
         ("C-y" . undo-tree-redo)
         ("M-z" . undo-tree-visualize) )
  :config
  (global-undo-tree-mode 1) )

(use-package whole-line-or-region
  :bind (("M-c" . whole-line-or-region-comment-dwim)
         ("C-v" . whole-line-or-region-yank)
         ("C-c" . whole-line-or-region-kill-ring-save)
         ("<M-delete>" . whole-line-or-region-kill-region) )
  :config
  (whole-line-or-region-mode 1) )

;; {{{ Cursor
(blink-cursor-mode 1)

(setq-default x-stretch-cursor t)
;; }}}

;; {{{ Prettify symbols
(global-prettify-symbols-mode +1)

(add-hook 'emacs-lisp-mode-hook (lambda ()
  (push '(">=" . ?≥)     prettify-symbols-alist)
  (push '("lambda" . ?λ) prettify-symbols-alist) ))
(add-hook 'haskell-mode-hook (lambda ()
  (push '("::" . ?∷)      prettify-symbols-alist)
  (push '("forall" . ?∀)  prettify-symbols-alist)
  (push '("->" . ?→)      prettify-symbols-alist)
  (push '("<-" . ?←)      prettify-symbols-alist)
  (push '("Integer" . ?ℤ) prettify-symbols-alist) ))
  ;; (push '(">=" . ?≥)      prettify-symbols-alist)
  ;; (push '("<=" . ?≤)      prettify-symbols-alist) ))
;; }}}

;; {{{ General options
(setq-default
  echo-keystrokes          0.1
  load-prefer-newer        t
  mouse-yank-at-point      t
  use-dialog-box           nil
  vc-follow-symlinks       t
  require-final-newline    t
  initial-scratch-message  ""
  inhibit-startup-screen   t
  show-trailing-whitespace t
)

(fset 'yes-or-no-p 'y-or-n-p)

;; Don't let the cursor go into minibuffer prompt
(setq-default minibuffer-prompt-properties (quote (read-only t point-entered minibuffer-avoid-prompt face minibuffer-prompt)))
;; }}}

;; {{{ General functions
(defun clean ()
    "Clean and indent whole buffer"
    (interactive)
    (delete-trailing-whitespace)
    ;(indent-region (point-min) (point-max) nil)
    (untabify (point-min) (point-max))
    (message "Cleaned buffer.") )

(defun dos2unix ()
  "Replace DOS eolns CR LF with Unix eolns CR"
  (interactive)
  (save-excursion
    (goto-char (point-min))
    (while (search-forward "\r" nil t) (replace-match "")) ))

(defun reload-user-init-file()
  (interactive)
  (load-file user-init-file))
;; }}}

;; {{{ Movement
(defun goto-line-with-feedback ()
  "Show line numbers temporarily, while prompting for the line number input"
  (interactive)
  (unwind-protect
    (progn
      (linum-mode 1)
        (goto-line (read-number "Goto line: ")))
    (linum-mode -1)
))

(defun smarter-move-beginning-of-line (arg)
  "Move point back to indentation of beginning of line.

  Move point to the first non-whitespace character on this line.
  If point is already there, move to the beginning of the line.
  Effectively toggle between the first non-whitespace character and
  the beginning of the line.

  If ARG is not nil or 1, move forward ARG - 1 lines first.  If
  point reaches the beginning or end of the buffer, stop there."

  (interactive "^p")
  (setq-default arg (or arg 1))

  ;; Move lines first
  (when (/= arg 1)
    (let ((line-move-visual nil))
      (forward-line (1- arg))))

  (let ((orig-point (point)))
    (back-to-indentation)
    (when (= orig-point (point))
      (move-beginning-of-line 1))))

(global-set-key (kbd "<C-left>")     'subword-backward)
(global-set-key (kbd "<C-right>")    'subword-forward)
(global-set-key (kbd "<M-left>")     'smarter-move-beginning-of-line)
(global-set-key (kbd "<M-right>")    'end-of-line)
(global-set-key (kbd "<M-up>")       'beginning-of-buffer)
(global-set-key (kbd "<M-down>")     'end-of-buffer)

(global-set-key (kbd "C-g")          'goto-line)
(global-set-key [remap goto-line]    'goto-line-with-feedback)
;; }}}

;; {{{ Scroll
(setq-default
    scroll-step                     1
    scroll-margin                   7
    scroll-conservatively           1000
    scroll-preserve-screen-position t
    scroll-error-top-bottom         t
)

(global-set-key (kbd "M-m")          'recenter)
(global-set-key (kbd "<S-down>")     'scroll-up-line)
(global-set-key (kbd "<S-up>")       'scroll-down-line)
;; (global-set-key (kbd "<S-next>")     'scroll-up)
;; (global-set-key (kbd "<S-prior>")    'scroll-down)
;; }}}

;; {{{ Selection

;; (setq-default cua-enable-cua-keys nil)
;; (cua-mode t)

(global-set-key (kbd "C-a")          'mark-whole-buffer)
;; }}}

;; {{{ Line manipulation
(defun smart-open-line ()
  "Insert an empty line after the current line. Position the cursor at its beginning, according to the current mode."
  (interactive)
  (move-end-of-line nil)
  (newline-and-indent))


(global-set-key (kbd "M-RET")      'smart-open-line)
(global-set-key (kbd "M-j")        (lambda ()
                                     (interactive)
                                     (join-line -1) ))
;; }}}

;; {{{ Kill ring & clipboard
(defun backward-kill-line (arg)
  "Kill ARG lines backward."
  (interactive "p")
  (kill-line (- 1 arg)))

(setq-default
  x-select-enable-primary   t
  x-select-enable-clipboard t
)

(global-set-key (kbd "<M-backspace>")      'backward-kill-line)
;; }}}

;; {{{ Tabs & indentation
(defun indent-region-or-line ()
   "Indent a region if selected, otherwise the current line."
   (interactive)
   (save-excursion (if (region-active-p)
       (progn
         (indent-region (region-beginning) (region-end))
         (message "Indented selected region.") )
       (progn
         (indent-region (line-beginning-position) (line-beginning-position 2))
         (message "Indented line.") ))))

(defun tab-or-expand ()
  (interactive)
  (if (and
       (or (bobp) (= ?w (char-syntax (char-before))))
       (or (eobp) (not (= ?w (char-syntax (char-after))))) )
      (dabbrev-expand nil)
      ;(hippie-expand nil)
     ;(indent-according-to-mode)
      (tab-to-tab-stop) ))

(setq-default
    indent-tabs-mode nil
    tab-width        4
    c-default-style  "linux"
    tab-stop-list (number-sequence 4 200 4)
    tab-always-indent 'complete
    ;standard-indent 4
    ;indent-line-function 'insert-tab
)

(defvaralias 'c-basic-offset     'tab-width)
(defvaralias 'cperl-indent-level 'tab-width)

(global-set-key (kbd "RET")    'newline-and-indent)
(global-set-key (kbd "TAB")    'tab-or-expand)
(global-set-key (kbd "M-i")    'indent-region-or-line)
(global-set-key (kbd "C-M-a")  'align)
(global-set-key (kbd "M-a")    'align-regexp)
;; }}}

;; {{{ Search & replace
(setq-default search-highlight t)
(setq-default query-replace-highlight t)

(global-set-key (kbd "M-f")         'isearch-occur)
;; (global-set-key (kbd "C-S-f")       'isearch-backward)

;; (global-set-key (kbd "C-f")         'occur)
;; (global-set-key (kbd "M-f")         'multi-occur)
(global-set-key (kbd "C-n")         'next-error)
(global-set-key (kbd "C-p")         'previous-error)

(define-key isearch-mode-map (kbd "C-f")   'isearch-repeat-forward)
(define-key isearch-mode-map (kbd "C-S-f") 'isearch-repeat-backward)
(define-key isearch-mode-map (kbd "C-s")   'save-buffer)
(define-key isearch-mode-map (kbd "C-S-s") 'write-file)

(global-set-key (kbd "M-r")         'query-replace-regexp)
;; }}}

;; {{{ Buffer manipulation
(defun kill-current-buffer ()
    (interactive)
    (kill-buffer (current-buffer)))

(defalias 'list-buffers 'ibuffer)
(setq-default
    ibuffer-default-sorting-mode 'major-mode
    ibuffer-expert t
    ibuffer-show-empty-filter-groups nil
    uniquify-separator "|"
    uniquify-buffer-name-style 'reverse )

(global-set-key (kbd "C-<prior>")     'bs-cycle-previous)
(global-set-key (kbd "C-<next>")      'bs-cycle-next)
;; (global-set-key (kbd "C-d")           'split-window)
(global-set-key (kbd "C-M-<prior>")   'other-window)
(global-set-key (kbd "C-M-<next>")    'other-window)
(global-set-key (kbd "C-w")           'delete-window)
;; (global-set-key (kbd "C-w")         'delete-other-windows)
(global-set-key (kbd "M-b")           'ibuffer)
;; }}}

;; {{{ Session
;; (global-set-key (kbd "C-q")         'save-buffers-kill-terminal)
(global-set-key (kbd "C-q")         'kill-current-buffer)
;; (global-set-key (kbd "C-q")         'server-edit)
;; (global-set-key (kbd "ESC <f4>")      'kill-emacs)
(global-set-key (kbd "C-s")         'save-buffer)
;; }}}

(setq-default confirm-nonexistent-file-or-buffer nil)
(global-set-key (kbd "M-o")  'bookmark-bmenu-list)

(add-hook 'after-save-hook 'executable-make-buffer-file-executable-if-script-p)

;; {{{ Server
(defun server-shutdown ()
    "Save buffers, quit, and shutdown (kill) server"
    (interactive)
    (save-some-buffers)
    (kill-emacs))

(add-hook 'server-done-hook 'delete-frame)
(add-hook 'server-done-hook (lambda nil (kill-buffer nil)))
;; }}}

;; {{{ Highlights
(setq-default show-paren-delay 0)
(set-face-background 'show-paren-match-face "#f00")
(set-face-foreground 'show-paren-match-face "#ff0")
(set-face-attribute  'show-paren-match-face nil :weight 'extra-bold)

(set-face-background 'hl-line "#000033")
(set-face-background 'region  "#00ff00")

(defun font-lock-comment-annotations ()
  "Highlight a bunch of well known comment annotations."
  (font-lock-add-keywords
   nil '(("\\<\\(FIX\\(ME\\)?\\|TODO\\|OPTIMIZE\\|HACK\\|REFACTOR\\):"
          1 font-lock-warning-face t))))

(add-hook 'prog-mode-hook 'font-lock-comment-annotations)
;; }}}

;; {{{ Eldoc
(add-hook 'emacs-lisp-mode-hook       'turn-on-eldoc-mode)
(add-hook 'lisp-interaction-mode-hook 'turn-on-eldoc-mode)
(add-hook 'ielm-mode-hook             'turn-on-eldoc-mode)
;; }}}

;; {{{ Syntax highlight
(setq-default font-lock-maximum-decoration t)
(global-set-key (kbd "M-h") 'font-lock-mode)
;; }}}

;; {{{ Completion
(setq
    dabbrev-abbrev-skip-leading-regexp "[=*]"
    hippie-expand-dabbrev-as-symbol    nil
    ;completion-cycle-threshold t
    ;completion-ignore-case t
    ;read-file-name-completion-ignore-case t
)
;; }}}

;; {{{ Backup/auto-save files
(setq
    backup-directory-alist         `((".*" . ,temporary-file-directory))
    auto-save-file-name-transforms `((".*" ,temporary-file-directory t))
    backup-by-copying              t
    delete-old-versions            t
)
;; }}}

; Diff
(setq-default
    ediff-split-window-function 'split-window-horizontally
    ediff-window-setup-function 'ediff-setup-windows-plain
    )

; linum
(setq-default linum-format "%d ")
(global-set-key (kbd "C-l")         'linum-mode)

; saveplace
(setq-default save-place-file (expand-file-name ".saveplace" user-emacs-directory))
(setq-default save-place t)
;; }}}

;; {{{ Language-based modes
(setq-default default-major-mode 'text-mode)
(add-to-list 'auto-mode-alist '("/mutt"      . mail-mode))
(add-to-list 'auto-mode-alist '("\\.*rc$"    . conf-unix-mode))
(add-to-list 'auto-mode-alist '("rc$"        . conf-unix-mode))
(add-to-list 'auto-mode-alist '("\.bashrc$"  . shell-script-mode))
(add-to-list 'auto-mode-alist '("\.profile$" . shell-script-mode))
;(add-to-list 'auto-mode-alist '("\.ino$"     . c-mode))
;; }}}

;; {{{ Mode-line
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(custom-safe-themes
   (quote
    ("6a37be365d1d95fad2f4d185e51928c789ef7a4ccf17e7ca13ad63a8bf5b922f" "756597b162f1be60a12dbd52bab71d40d6a2845a3e3c2584c6573ee9c332a66e" default)))
 '(paradox-github-token t))

(use-package smart-mode-line
  :config
  (sml/setup)
  (sml/apply-theme 'dark) )
;; }}}

;; {{{ Hooks
(add-hook 'after-save-hook  'executable-make-buffer-file-executable-if-script-p)
(add-hook 'before-save-hook 'whitespace-cleanup)
(add-hook 'before-save-hook 'dos2unix)
;; }}}

;; {{{ Theme
(use-package solarized-theme
  :config
  (add-to-list 'default-frame-alist '(background-color . "#000011"))
  (add-to-list 'default-frame-alist '(background-mode  . dark))
  ;; (add-to-list 'default-frame-alist '(cursor-color     . "#00ff00"))
  ;; (add-to-list 'default-frame-alist '(cursor-type      . bar))
  (add-to-list 'default-frame-alist '(font             . "Inconsolata-12"))
  (add-to-list 'default-frame-alist '(mouse-color      . "#007700"))
  (add-to-list 'default-frame-alist '(alpha            . 90))
  (load-theme 'solarized-dark t) )
;; }}}
