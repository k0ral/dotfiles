; {{{ Util
(defun server-shutdown ()
    "Save buffers, Quit, and Shutdown (kill) server"
    (interactive)
    (save-some-buffers)
    (kill-emacs))

(defun kill-current-buffer ()
    (interactive)
    (kill-buffer (current-buffer)))

(defun clean ()
  "Clean and indent whole buffer"
  (interactive)
  (delete-trailing-whitespace)
  ;(indent-region (point-min) (point-max) nil)
  (untabify (point-min) (point-max)))
; }}}

; ELPA
(eval-after-load "packages" '(progn
    (add-to-list 'package-archives '("marmalade" . "http://marmalade-repo.org/packages/"))
    (setq package-enable-at-startup nil)))

; Mutt
(add-to-list 'auto-mode-alist '("/mutt" . mail-mode))

; Dired
(add-hook 'dired-load-hook (function (lambda nil (load "dired-x"))))

(eval-after-load "dired" '(progn
    (defun dired-execute nil
        "Try to execute file at point."
        (interactive)
        (shell-command (dired-get-filename)))

    (setq dired-listing-switches "-lh --group-directories-first")
    (put 'dired-find-alternate-file 'disabled nil)

    (define-key dired-mode-map (kbd "<return>")    'dired-find-alternate-file)
    (define-key dired-mode-map (kbd "r")           'dired-do-rename)
    (define-key dired-mode-map (kbd "x")           'dired-execute)
    (define-key dired-mode-map (kbd "X")           'dired-do-flagged-delete)
    (define-key dired-mode-map (kbd "<backspace>") 'dired-up-directory)))


(add-hook 'after-save-hook 'executable-make-buffer-file-executable-if-script-p)


; {{{ Server
(add-hook 'server-done-hook 'delete-frame)
;(add-hook 'server-done-hook (lambda nil (kill-buffer nil)))
; }}}

; Font
(add-to-list 'default-frame-alist '(font . "Consolas-10"))

; {{{ Minor modes
; Trailing whitespaces
(add-hook 'emacs-lisp-mode-hook (lambda nil (setq show-trailing-whitespace t)))

; Highlight parenthesis
(add-to-list 'load-path "~/.emacs.d/elpa/rainbow-delimiters-1.3.3")
(when (require 'rainbow-delimiters nil 'noerror)
    (global-rainbow-delimiters-mode 1))
(show-paren-mode 1)

; Misc
(setq vc-follow-symlinks t)
(fset 'yes-or-no-p 'y-or-n-p)
(setq require-final-newline t)
;(setq ring-bell-function 'ignore)
(setq inhibit-startup-screen t)

; {{{ Minor modes
(column-number-mode 1)
(delete-selection-mode 1)
(file-name-shadow-mode 1)
;(global-font-lock-mode 1)
;(global-hl-line-mode 1)
;(icomplete-mode 1)
(line-number-mode 1)
(menu-bar-mode -1)
(scroll-bar-mode -1)
(savehist-mode 1)
(size-indication-mode t)
(tool-bar-mode -1)
(which-function-mode 1)

; Eldoc
(add-hook 'emacs-lisp-mode-hook       'turn-on-eldoc-mode)
(add-hook 'lisp-interaction-mode-hook 'turn-on-eldoc-mode)
(add-hook 'ielm-mode-hook             'turn-on-eldoc-mode)

; {{{ Colors
(add-to-list 'load-path "~/.emacs.d/elpa/color-theme-6.6.1")
(require 'color-theme)
(load "~/.emacs.d/elpa/color-theme-blackboard-0.0.2/color-theme-blackboard.el")

;(setq color-theme-is-global nil)
(color-theme-blackboard)

;(defun apply-color-theme (frame)
;    (select-frame frame)
;    (if (display-graphic-p frame) (color-theme-blackboard) (color-theme-tty-dark)))
;(add-hook 'after-make-frame-functions 'color-theme-blackboard)

;(setq frame-background-mode nil)
;(invert-face 'default)

(set-frame-parameter (selected-frame) 'alpha '(85 50))
(add-to-list 'default-frame-alist '(alpha 85 50))
; }}}

; Clipboard
;(setq x-select-enable-clipboard t)
;(global-set-key (kbd "S-<insert>") 'mouse-yank-primary)

; Scrolling
(setq scroll-step 1)
(setq scroll-margin 4)
;(setq scroll-conservatively 100000)
(setq scroll-preserve-screen-position t)

(add-hook 'eshell-mode-hook (lambda nil (setq scroll-margin 0)))

; {{{ Search/replace
(setq search-highlight t)
(setq query-replace-highlight t)

;(global-set-key (kbd "C-f")         'isearch-forward)
;(global-set-key (kbd "C-S-f")       'isearch-backward)

(global-set-key (kbd "C-f")         'anything-occur)
(global-set-key (kbd "M-f")         'multi-occur)
(global-set-key (kbd "C-n")         'next-error)
(global-set-key (kbd "C-p")         'previous-error)
; }}}

; Syntax highlight
;(setq font-lock-maximum-decoration t)

; Tabs and indentation
(setq-default tab-width 4)
;(setq-default standard-indent 4)
(setq-default indent-tabs-mode nil)

; Completion
;(setq completion-cycle-threshold t)
;(setq completion-ignore-case t)
;(setq read-file-name-completion-ignore-case t)

; Backup files
;(setq make-backup-files t)
;(setq backup-directory-alist         `((".*" . ,temporary-file-directory)))
;(setq auto-save-file-name-transforms `((".*" ,temporary-file-directory t)))

; Diff
;(global-highlight-changes-mode t)
;(setq highlight-changes-visibility-initial-state nil)

;(set-face-foreground 'highlight-changes nil)
;(set-face-background 'highlight-changes "#007700")
;(set-face-foreground 'highlight-changes-delete nil)
;(set-face-background 'highlight-changes-delete "#770000")
;
;(global-set-key (kbd "C-d")       'highlight-changes-visible-mode)
;(global-set-key (kbd "M-<next>")  'highlight-changes-next-change)
;(global-set-key (kbd "M-<prior>") 'highlight-changes-previous-change)

; Spell checking
(setq ispell-program-name "aspell")
(setq ispell-extra-args '("--sug-mode=ultra"))

(add-hook 'org-mode-hook (lambda nil (flyspell-mode 1)))

; linum
(when (require 'linum nil 'noerror)
;    (global-linum-mode 1)
    (setq linum-format "%d "))

; uniquify
(when (require 'uniquify nil 'noerror)
    (setq uniquify-separator ":"))

; saveplace
(when (require 'saveplace nil 'noerror)
    (setq save-place-file "~/.config/emacs/saveplace")
    (setq-default save-place t))

; whole line or region
(add-to-list 'load-path "~/.emacs.d/elpa/whole-line-or-region-1.3.1")
(when (require 'whole-line-or-region nil 'noerror)
    (whole-line-or-region-mode 1))

; {{{ yasnippets
(add-to-list 'load-path "~/.emacs.d/elpa/yasnippet-0.6.1")
(autoload 'yas/expand "yasnippet" "Completion snippets" t)
(eval-after-load "yasnippet" '(progn
    (yas/load-directory "~/.emacs.d/elpa/yasnippet-0.6.1/snippets")
    (yas/global-mode 1)))

(global-set-key (kbd "<tab>") 'yas/expand)
; }}}

; {{{ Autopair
(electric-pair-mode 1)
; }}}

; CUA mode, only for rectangles
(setq cua-enable-cua-keys nil)
(cua-mode t)

; {{{ ido
(when (require 'ido nil 'noerror)
    (ido-mode 'both)
    (ido-everywhere 1)

    (setq ido-create-new-buffer 'never)
    (setq ido-enable-tramp-completion nil)

    (setq ido-enable-last-directory-history t)
    (setq ido-max-work-directory-list  30)
    (setq ido-max-work-file-list       50)
    (setq ido-save-directory-list-file "~/.config/emacs/ido.last")

    ;(setq ido-ignore-extensions t)
    ;(setq ido-ignore-buffers '("\\` " "^\*Mess" "^\*Back" ".*Completion" "^\*Ido" "^\*trace" "^\*compilation" "^\*GTAGS" "^session\.*" "^\*"))

    (setq ido-work-directory-list '("~/"))

    (setq ido-case-fold             t)
    (setq ido-use-filename-at-point nil)
    (setq ido-use-url-at-point      nil)
    (setq ido-enable-flex-matching  t)
    (setq ido-max-prospects         8)
    (setq ido-confirm-unique-completion t)
    (setq confirm-nonexistent-file-or-buffer nil))

(global-set-key (kbd "C-o") 'find-file)
;(global-set-key (kbd "C-w") 'ido-kill-buffer)
; }}}

; Folding
;(load "folding" 'nomessage 'noerror)
;(folding-mode-add-find-file-hook)
;(folding-add-to-marks-list 'ruby-mode "#{{{" "#}}}" nil t)
;(folding-add-to-marks-list 'haskell-mode "--{{{" "--}}}" nil t)

; {{{ Language-based modes
; Haskell
(add-hook 'haskell-mode-hook 'turn-on-haskell-doc-mode)
(add-hook 'haskell-mode-hook 'turn-on-haskell-indentation)
;;(add-hook 'haskell-mode-hook 'turn-on-haskell-indent)
;;(add-hook 'haskell-mode-hook 'turn-on-haskell-simple-indent)

(setq auto-mode-alist (append auto-mode-alist '(
    ("\\.[hg]s$"  . haskell-mode)
    ("\\.hic?$"   . haskell-mode)
    ("\\.hsc$"    . haskell-mode)
    ("\\.chs$"    . haskell-mode)
    ("\\.l[hg]s$" . literate-haskell-mode))))
(autoload 'haskell-mode "haskell-mode" "Major mode for editing Haskell scripts." t)
(autoload 'literate-haskell-mode "haskell-mode" "Major mode for editing literate Haskell scripts." t)

; PKGBUILD
(autoload 'pkgbuild-mode "pkgbuild-mode.el" "PKGBUILD mode." t)
(setq auto-mode-alist (append '(("/PKGBUILD$" . pkgbuild-mode)) auto-mode-alist))

; Python
;(autoload 'python-mode "python-mode.el" "Python mode." t)
;(setq auto-mode-alist (append '(("/*.\.py$" . python-mode)) auto-mode-alist))

; C/C++/Java
;(setq c-default-style '(
;    (java-mode . "java")
;    (awk-mode .  "awk")
;    (other .     "linux")))

;(setq         c-indent-level 4)             ; TAB = 4 spaces
;(setq-default c-basic-offset 4)             ; Indentation unit
;(setq-default c-toggle-electric-flag nil)

(add-hook 'c-mode-common-hook (lambda ()
    (font-lock-add-keywords nil '(("\\<\\(FIXME\\|TODO\\|BUG\\):" 1 font-lock-warning-face t)))))
; }}}

; {{{ Term mode
;(require 'cl)
;(require 'term)
(add-to-list 'load-path "/home/chahine/.emacs.d/elpa/multi-term-0.8.8")
(autoload 'multi-term "multi-term" nil t)
(eval-after-load "multi-term" '(progn
    (setq multi-term-program "/bin/bash")
    (setq multi-term-scroll-to-bottom-on-output "this")))

;(add-hook 'term-mode-hook (lambda ()
;    (hl-line-mode nil)
;    (linum-mode nil)))
; }}}

; Windows movement
(when (require 'windmove nil 'noerror)
    (windmove-default-keybindings 'meta))

; Undo
(add-to-list 'load-path "~/.emacs.d/elpa/undo-tree-0.3.3")
(when (require 'undo-tree nil 'noerror)
    (global-undo-tree-mode 1)
    (global-set-key (kbd "C-z")   'undo-tree-undo)
    (global-set-key (kbd "C-S-z") 'undo-tree-redo)
    (global-set-key (kbd "M-z")   'undo-tree-visualize))

; Modeline
(set-face-background 'modeline "#000033")
(set-face-foreground 'modeline "#aaaaff")
(setq-default mode-line-format (list
    ;; insert vs overwrite mode, input-method in a tooltip
    " " '(:eval (propertize (if overwrite-mode "Ovr" "Ins")
            'face 'font-lock-preprocessor-face
            'help-echo (concat "Buffer is in " (if overwrite-mode "overwrite" "insert") " mode")))

    ;; was this buffer modified since the last save?
    '(:eval (when (buffer-modified-p)
              (concat ","  (propertize "Mod" 'face 'font-lock-warning-face))))

    ;; is this buffer read-only?
    '(:eval (when buffer-read-only
              (concat ","  (propertize "RO" 'face 'font-lock-type-face))))

    ; the buffer name; the file name as a tool tip
    " | " (propertize "%b " 'face 'font-lock-keyword-face)

    ; line and column
    " | " (propertize "%04l" 'face 'font-lock-type-face)
    "," (propertize "%03c" 'face 'font-lock-type-face)

    ; relative position, size of file
    " | " (propertize "%p" 'face 'font-lock-type-face)
    "/" (propertize "%I" 'face 'font-lock-constant-face)

    ; the current major mode for the buffer.
    " | " (propertize "%m" 'face 'font-lock-string-face)
    " /" minor-mode-alist

    " | %Z %e %[ %-"))

; {{{ Anything
(add-to-list 'load-path "~/.emacs.d/elpa/anything-1.287")
(add-to-list 'load-path "~/.emacs.d/elpa/anything-config-0.4.1")
(when (require 'anything-config nil 'noerror)
    (outline-minor-mode 1))

; smex
;(add-to-list 'load-path "~/.emacs.d/elpa/smex-1.1.2")
;(autoload 'smex "smex" "Advanced M-x" t)
;(eval-after-load "smex" '(progn
;    (setq smex-save-file "~/.config/emacs/smex.save")
;    (smex-initialize)))
;
;(global-set-key (kbd "M-x") 'smex)
(global-set-key (kbd "M-x") 'anything-M-x)

; Buffers navigation
(global-set-key (kbd "C-<prior>")   'bs-cycle-previous)
(global-set-key (kbd "C-<next>")    'bs-cycle-next)
;(global-set-key (kbd "C-b")         'bs-show)
(global-set-key (kbd "C-b")         'anything-buffers+)

; {{{ Keys
;(global-set-key (kbd "M-<right>")   'forward-sentence)
;(global-set-key (kbd "M-<left>")    'backward-sentence)

(global-set-key (kbd "<delete>")    'delete-char)
(global-set-key (kbd "C-M-<delete>") 'kill-line)
(global-set-key (kbd "M-<delete>")  'kill-whole-line)
(global-set-key (kbd "C-v")         'yank)
(global-set-key (kbd "M-v")         'yank-pop)
(global-set-key (kbd "C-c")         'kill-ring-save)



(global-set-key (kbd "C-q")         'save-buffers-kill-terminal)
;(global-set-key (kbd "C-q")         'kill-current-buffer)
(global-set-key (kbd "M-<f4>")      'kill-emacs)
(global-set-key (kbd "C-s")         'save-buffer)
(global-set-key (kbd "C-S-s")       'write-file)
(global-set-key (kbd "M-s")         'ido-write-file)
;(global-set-key (kbd "<escape>")    'keyboard-quit)

(global-set-key (kbd "C-<home>")    'beginning-of-buffer)
(global-set-key (kbd "C-<end>")     'end-of-buffer)
(global-set-key (kbd "C-g")         'goto-line)

(global-set-key (kbd "M-SPC")       'cua-set-rectangle-mark)
(global-set-key (kbd "C-a")         'mark-whole-buffer)
(global-set-key (kbd "M-c")         'comment-or-uncomment-region)

(global-set-key (kbd "C-r")         'query-replace)
(global-set-key (kbd "M-r")         'replace-string)

;(global-set-key (kbd "M-<tab>")     'other-window)
;(global-set-key (kbd "C-w")         'delete-other-windows)
;(global-set-key (kbd "C-e")         'other-window)

(global-set-key (kbd "C-l")         'linum-mode)

(global-set-key (kbd "<f11>")       'compile)
(global-set-key (kbd "<f12>")       'multi-term)

(define-key isearch-mode-map (kbd "C-f")   'isearch-repeat-forward)
(define-key isearch-mode-map (kbd "C-S-f") 'isearch-repeat-backward)
(define-key isearch-mode-map (kbd "C-s")   'save-buffer)
(define-key isearch-mode-map (kbd "C-S-s") 'write-file)
; }}}

; {{{ Wanderlust
;(autoload 'wl                    "wl" "Wanderlust" t)
;(autoload 'wl-other-frame        "wl" "Wanderlust on new frame." t)
;(autoload 'wl-draft              "wl-draft" "Write draft with Wanderlust." t)
;(autoload 'wl-user-agent-compose "wl-draft" nil t)
;
;(if (boundp 'mail-user-agent)
;    (setq mail-user-agent 'wl-user-agent))
;(if (fboundp 'define-mail-user-agent)
;    (define-mail-user-agent
;      'wl-user-agent
;      'wl-user-agent-compose
;      'wl-draft-send
;      'wl-draft-kill
;      'mail-send-hook))
;
;(setq wl-init-file "~/.config/emacs/wanderlust/wl")
; }}}

; {{{ ERC
;(autoload 'erc "erc" "IRC client" t)
;(eval-after-load "erc" '(progn
;    (require 'erc-match)
;
;    (erc-autojoin-mode t)
;    (setq erc-autojoin-channels-alist '((".*\\.freenode.net" "#emacs" "#haskell" "#haskell-fr")))
;
;    (setq erc-server         "irc.freenode.net")
;    (setq erc-port           6667)
;    (setq erc-nick           "k0ral")
;    (setq erc-user-full-name "k0ral")
;    ;(setq erc-email-userid   "userid"    ; for when ident is not activated
;    (setq erc-prompt-for-password t)
;
;    (setq erc-keywords '("hbro" "koral" "k0ral"))
;
;    (erc-track-mode t)
;    (setq erc-track-exclude-types '("JOIN" "NICK" "PART" "QUIT" "MODE" "324" "329" "332" "333" "353" "477"))
;    (setq erc-hide-list '("JOIN" "PART" "QUIT" "NICK"))))
; }}}
