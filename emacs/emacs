(require 'cl)

;; {{{ ELPA
(package-initialize)

(add-to-list 'package-archives '("melpa"     . "http://melpa.milkbox.net/packages/"))
(add-to-list 'package-archives '("gnu"       . "http://elpa.gnu.org/packages/"))
(add-to-list 'package-archives '("marmalade" . "http://marmalade-repo.org/packages/"))

(defvar myPackages '(ace-jump-mode autopair browse-kill-ring buffer-move c-eldoc
                     color-file-completion crontab-mode dired+ dired-details
                     dired-details+ haskell-mode highlight-symbol iedit paredit
                     rainbow-delimiters rainbow-mode smex solarized-theme undo-tree
                     whole-line-or-region) "Default packages")

(defun myPackages-installed-p ()
  (loop for pkg in myPackages
        when (not (package-installed-p pkg)) do (return nil)
        finally (return t) ))

(unless (myPackages-installed-p)
  (message "%s" "Refreshing package database...")
  (package-refresh-contents)
  (dolist (pkg myPackages)
    (when (not (package-installed-p pkg))
      (package-install pkg) )))
;; }}}

;; {{{ Minor modes
(blink-cursor-mode 1)
(delete-selection-mode 1)
(file-name-shadow-mode 1)
(global-hl-line-mode 1)
;; (global-linum-mode 1)
(when (require 'rainbow-delimiters nil 'noerror) (global-rainbow-delimiters-mode 1))
(global-subword-mode 1)
(global-visual-line-mode 1)
;; (icomplete-mode 1)
(ido-mode 'both)
(highlight-symbol-mode 1)
(menu-bar-mode -1)
(paredit-mode t)
(recentf-mode 1)
(savehist-mode 1)
(scroll-bar-mode -1)
(size-indication-mode t)
(show-paren-mode 1)
;(tabbar-mode 1)
(tool-bar-mode -1)
(which-function-mode 1)
;; }}}

;; {{{ General options
(setq-default echo-keystrokes 0.1)
(setq-default use-dialog-box nil)
(setq-default vc-follow-symlinks t)
(setq-default require-final-newline t)
;; (setq ring-bell-function 'ignore)
(setq-default inhibit-startup-screen t)
(setq-default show-trailing-whitespace t)

(fset 'yes-or-no-p 'y-or-n-p)
;; }}}

;; {{{ General functions
(defun clean ()
    "Clean and indent whole buffer"
    (interactive)
    (delete-trailing-whitespace)
    ;(indent-region (point-min) (point-max) nil)
    (untabify (point-min) (point-max))
    (message "Cleaned buffer.") )

(defun dos2unix ()
  "Replace DOS eolns CR LF with Unix eolns CR"
  (interactive)
  (save-excursion
    (goto-char (point-min))
    (while (search-forward "\r" nil t) (replace-match "")) ))

(defun reload-user-init-file()
  (interactive)
  (load-file user-init-file))
;; }}}

;; {{{ Movement
(defun goto-line-with-feedback ()
    "Show line numbers temporarily, while prompting for the line number input"
    (interactive)
    (unwind-protect
        (progn
          (linum-mode 1)
          (goto-line (read-number "Goto line: ")))
      (linum-mode -1)))

(defun smarter-move-beginning-of-line (arg)
  "Move point back to indentation of beginning of line.

  Move point to the first non-whitespace character on this line.
  If point is already there, move to the beginning of the line.
  Effectively toggle between the first non-whitespace character and
  the beginning of the line.

  If ARG is not nil or 1, move forward ARG - 1 lines first.  If
  point reaches the beginning or end of the buffer, stop there."

  (interactive "^p")
  (setq arg (or arg 1))

  ;; Move lines first
  (when (/= arg 1)
    (let ((line-move-visual nil))
      (forward-line (1- arg))))

  (let ((orig-point (point)))
    (back-to-indentation)
    (when (= orig-point (point))
      (move-beginning-of-line 1))))

(global-set-key (kbd "<C-left>")     'subword-backward)
(global-set-key (kbd "<C-right>")    'subword-forward)
(global-set-key (kbd "<M-left>")     'smarter-move-beginning-of-line)
(global-set-key (kbd "<M-right>")    'end-of-line)
(global-set-key (kbd "<M-up>")       'beginning-of-buffer)
(global-set-key (kbd "<M-down>")     'end-of-buffer)

(global-set-key (kbd "C-g")          'goto-line)
(global-set-key (kbd "M-g")          'ace-jump-mode)
(global-set-key [remap goto-line] 'goto-line-with-feedback)
;; }}}

;; {{{ Scroll
(setq-default scroll-step 1)
(setq-default scroll-margin 7)
(setq-default scroll-conservatively 1000)
(setq-default scroll-preserve-screen-position t)

(global-set-key (kbd "M-m")          'recenter)
(global-set-key (kbd "<S-down>")     'scroll-up-line)
(global-set-key (kbd "<S-up>")       'scroll-down-line)
;; (global-set-key (kbd "<S-next>")     'scroll-up)
;; (global-set-key (kbd "<S-prior>")    'scroll-down)
;; }}}

;; {{{ Selection
(whole-line-or-region-mode 1)

(setq cua-enable-cua-keys nil)
(cua-mode t)

(global-set-key (kbd "M-SPC")        'cua-set-rectangle-mark)
(global-set-key (kbd "C-a")          'mark-whole-buffer)
(global-set-key (kbd "M-c")          'whole-line-or-region-comment-dwim)
;; }}}

;; {{{ Line manipulation
(defun smart-open-line ()
  "Insert an empty line after the current line. Position the cursor at its beginning, according to the current mode."
  (interactive)
  (move-end-of-line nil)
  (newline-and-indent))


(global-set-key (kbd "M-RET")      'smart-open-line)
(global-set-key (kbd "M-j")        (lambda ()
                                     (interactive)
                                     (join-line -1) ))
;; }}}

;; {{{ Kill ring & clipboard
(defun backward-kill-line (arg)
  "Kill ARG lines backward."
  (interactive "p")
  (kill-line (- 1 arg)))

(defun whack-whitespace (arg)
  "Delete all white space from point to the next word.  With prefix ARG
delete across newlines as well.  The only danger in this is that you
don't have to actually be at the end of a word to make it work.  It
skips over to the next whitespace and then whacks it all to the next
word."
  (interactive "P")
  (let ((regexp (if arg "[ \t\n]+" "[ \t]+")))
    (re-search-forward regexp nil t)
    (replace-match "" nil nil)))

(setq x-select-enable-primary t)

(global-set-key (kbd "C-v")                'whole-line-or-region-yank)
(global-set-key (kbd "M-v")                'browse-kill-ring)
(global-set-key (kbd "C-c")                'whole-line-or-region-kill-ring-save)
;; (global-set-key (kbd "<C-delete>")         'paredit-forward-kill-word)
(global-set-key (kbd "<M-delete>")         'whole-line-or-region-kill-region)
(global-set-key (kbd "<M-backspace>")      'backward-kill-line)
(global-set-key (kbd "<C-S-delete>")       'whack-whitespace)
(global-set-key (kbd "<C-M-delete>")       'paredit-kill)
;; }}}

;; {{{ Undo
(global-undo-tree-mode 1)
(global-set-key (kbd "C-z") 'undo-tree-undo)
(global-set-key (kbd "C-y") 'undo-tree-redo)
(global-set-key (kbd "M-z") 'undo-tree-visualize)
;; }}}

;; {{{ Tabs & indentation
(defun indent-region-or-line ()
   "Indent a region if selected, otherwise the current line."
   (interactive)
   (save-excursion (if (region-active-p)
       (progn
         (indent-region (region-beginning) (region-end))
         (message "Indented selected region.") )
       (progn
         (indent-region (line-beginning-position) (line-beginning-position 2))
         (message "Indented line.") ))))

(defun tab-or-expand ()
  (interactive)
  (if (and
       (or (bobp) (= ?w (char-syntax (char-before))))
       (or (eobp) (not (= ?w (char-syntax (char-after))))) )
      (dabbrev-expand nil)
      ;(hippie-expand nil)
     ;(indent-according-to-mode)
      (tab-to-tab-stop) ))

(setq-default
    indent-tabs-mode nil
    tab-width        4
    c-default-style  "linux"
    tab-stop-list (number-sequence 4 200 4)
    ;standard-indent 4
    ;indent-line-function 'insert-tab
)

(defvaralias 'c-basic-offset     'tab-width)
(defvaralias 'cperl-indent-level 'tab-width)

(global-set-key (kbd "RET")    'newline-and-indent)
(global-set-key (kbd "TAB")    'tab-or-expand)
(global-set-key (kbd "M-i")    'indent-region-or-line)
(global-set-key (kbd "C-M-a")  'align)
(global-set-key (kbd "M-a")    'align-regexp)
;; }}}

;; {{{ Search & replace
(setq search-highlight t)
(setq query-replace-highlight t)

(global-set-key (kbd "C-f")         'isearch-forward)
(global-set-key (kbd "M-f")         'isearch-occur)
;; (global-set-key (kbd "C-S-f")       'isearch-backward)

;; (global-set-key (kbd "C-f")         'occur)
;; (global-set-key (kbd "M-f")         'multi-occur)
(global-set-key (kbd "C-n")         'next-error)
(global-set-key (kbd "C-p")         'previous-error)

(define-key isearch-mode-map (kbd "C-f")   'isearch-repeat-forward)
(define-key isearch-mode-map (kbd "C-S-f") 'isearch-repeat-backward)
(define-key isearch-mode-map (kbd "C-s")   'save-buffer)
(define-key isearch-mode-map (kbd "C-S-s") 'write-file)

(global-set-key (kbd "C-r")         'iedit-mode)
(global-set-key (kbd "M-r")         'query-replace-regexp)
;; }}}

;; {{{ Buffer manipulation
(defun kill-current-buffer ()
    (interactive)
    (kill-buffer (current-buffer)))

(global-set-key (kbd "C-<prior>")     'bs-cycle-previous)
(global-set-key (kbd "C-<next>")      'bs-cycle-next)
;; (global-set-key (kbd "C-d")           'split-window)
(global-set-key (kbd "M-<tab>")       'other-window)
(global-set-key (kbd "M-w")           'delete-window)
;(global-set-key (kbd "C-w")         'delete-other-windows)
;; }}}

;; {{{ Session
;; (global-set-key (kbd "C-q")         'save-buffers-kill-terminal)
(global-set-key (kbd "C-q")         'kill-current-buffer)
;; (global-set-key (kbd "C-q")         'server-edit)
;; (global-set-key (kbd "ESC <f4>")      'kill-emacs)
(global-set-key (kbd "C-s")         'save-buffer)
;; }}}

;; {{{ Interaction
(smex-initialize)
(global-set-key (kbd "M-x")    'smex)
;; (global-set-key (kbd "<menu>") 'smex)
;; }}}

;; {{{ Dired
(eval-after-load "dired" '(progn
(defun dired-execute nil
  "Try to execute file at point."
  (interactive)
  (shell-command (dired-get-filename)) )

(when (require 'dired-details+ nil 'noerror)
  (setq dired-details-hide-link-targets nil) )

(setq dired-auto-revert-buffer t)
(setq dired-dwim-target t)
(setq dired-listing-switches "-lh --group-directories-first")
(setq dired-recursive-deletes 'always)
(setq dired-recursive-copies 'always)
;; (put 'dired-find-alternate-file 'disabled nil)
(setq image-dired-external-viewer "mirage")

(define-key dired-mode-map (kbd "<f5>")        'revert-buffer)

(define-key dired-mode-map (kbd "r")           'dired-do-rename)
(define-key dired-mode-map (kbd "x")           'dired-do-flagged-delete)
;(define-key dired-mode-map (kbd "X")           'dired-do-flagged-delete)
(define-key dired-mode-map (kbd "c")           'dired-do-copy)
(define-key dired-mode-map (kbd "C")           'dired-do-copy-regexp)
(define-key dired-mode-map (kbd "m")           'dired-do-rename)
(define-key dired-mode-map (kbd "M")           'dired-do-rename-regexp)
(define-key dired-mode-map (kbd "p")           'dired-display-file)
(define-key dired-mode-map (kbd "l")           'dired-do-symlink)
(define-key dired-mode-map (kbd "h")           'dired-do-chmod)
(define-key dired-mode-map (kbd "g")           'dired-do-chgrp)
(define-key dired-mode-map (kbd "t")           'dired-do-touch)
(define-key dired-mode-map (kbd "z")           'dired-do-compress)
(define-key dired-mode-map (kbd "<deletechar>") 'dired-do-kill-lines)
(define-key dired-mode-map (kbd "<return>")    'dired-find-alternate-file)

(define-key dired-mode-map (kbd "SPC")         'dired-mark)
(define-key dired-mode-map (kbd "TAB")         'dired-toggle-marks)
(define-key dired-mode-map (kbd "C-a")         'dired-mark-subdir-files)
(define-key dired-mode-map (kbd "* *")         'dired-mark-subdir-files)
(define-key dired-mode-map (kbd "* x")         'dired-mark-executables)
;(define-key dired-mode-map (kbd "C-@")         'dired-flag-files-regexp)
(define-key dired-mode-map (kbd "C-@")         'dired-mark-files-regexp)
;(define-key dired-mode-map (kbd "!")         'dired-flag-files-regexp)
(define-key dired-mode-map (kbd "C-n")         'dired-next-marked-file)
(define-key dired-mode-map (kbd "C-p")         'dired-prev-marked-file)
(define-key dired-mode-map (kbd "D")           'dired-do-delete)

(define-key dired-mode-map (kbd "DEL")         'dired-up-directory)
(define-key dired-mode-map (kbd "/")           'dired-isearch-filenames-regexp) ))
;; }}}

(add-hook 'after-save-hook 'executable-make-buffer-file-executable-if-script-p)

;; {{{ Server
(defun server-shutdown ()
    "Save buffers, quit, and shutdown (kill) server"
    (interactive)
    (save-some-buffers)
    (kill-emacs))

(add-hook 'server-done-hook 'delete-frame)
(add-hook 'server-done-hook (lambda nil (kill-buffer nil)))
;; }}}

;; {{{ Highlights
(setq-default show-paren-delay 0)
(set-face-background 'show-paren-match-face "#f00")
(set-face-foreground 'show-paren-match-face "#ff0")
(set-face-attribute  'show-paren-match-face nil :weight 'extra-bold)

(set-face-background 'hl-line "#000033")
(set-face-background 'region  "#00ff00")

(global-set-key (kbd "C-h")          'highlight-symbol-at-point)
(global-set-key (kbd "M-n")          'highlight-symbol-next)
(global-set-key (kbd "M-p")          'highlight-symbol-prev)
;; }}}

;; {{{ Eldoc
(add-hook 'emacs-lisp-mode-hook       'turn-on-eldoc-mode)
(add-hook 'lisp-interaction-mode-hook 'turn-on-eldoc-mode)
(add-hook 'ielm-mode-hook             'turn-on-eldoc-mode)
(add-hook 'c-mode-hook                'c-turn-on-eldoc-mode)
;; }}}

;; {{{ Syntax highlight
(setq font-lock-maximum-decoration t)
(global-set-key (kbd "M-h") 'font-lock-mode)
;; }}}

;; {{{ Completion
(setq
    dabbrev-abbrev-skip-leading-regexp "[=*]"
    hippie-expand-dabbrev-as-symbol    nil
    ;completion-cycle-threshold t
    ;completion-ignore-case t
    ;read-file-name-completion-ignore-case t
)
;; }}}

;; {{{ Backup/auto-save files
(setq
    backup-directory-alist         `((".*" . ,temporary-file-directory))
    auto-save-file-name-transforms `((".*" ,temporary-file-directory t))
    backup-by-copying              t
    delete-old-versions            t
)
;; }}}

; Diff
(setq ediff-window-setup-function 'ediff-setup-windows-plain)
;(global-highlight-changes-mode t)
;(setq highlight-changes-visibility-initial-state nil)

;(set-face-foreground 'highlight-changes nil)
;(set-face-background 'highlight-changes "#007700")
;(set-face-foreground 'highlight-changes-delete nil)
;(set-face-background 'highlight-changes-delete "#770000")
;
;(global-set-key (kbd "C-d")       'highlight-changes-visible-mode)
;(global-set-key (kbd "M-<next>")  'highlight-changes-next-change)
;(global-set-key (kbd "M-<prior>") 'highlight-changes-previous-change)

; linum
(setq linum-format "%d ")
(global-set-key (kbd "C-l")         'linum-mode)

; uniquify
(when (require 'uniquify nil 'noerror)
    (setq uniquify-separator "|")
    (setq uniquify-buffer-name-style 'reverse))

; saveplace
(when (require 'saveplace nil 'noerror)
    (setq save-place-file (expand-file-name ".saveplace" user-emacs-directory))
    (setq-default save-place t))

;; {{{ Autopair
;; (when (require 'autopair)
    ;; (setq autopair-autowrap t)
    ;; (autopair-global-mode 1))
(electric-pair-mode +1)
;; }}}

 ; {{{ ido
(defadvice ido-find-file (after find-file-sudo activate)
  "Find file as root if necessary."
  (unless (and buffer-file-name
               (file-writable-p buffer-file-name))
    (find-alternate-file (concat "/sudo:root@localhost:" buffer-file-name))))

(ido-everywhere 1)

(setq-default ido-decorations '(" {" "}" " | " " | ..." " [" "]" " [No match]" " [Matched]" " [Not readable]" " [Too big]" " [Confirm]"))

(setq ido-create-new-buffer 'never)
(setq ido-enable-tramp-completion nil)
(setq ido-enable-last-directory-history nil)
;; (setq ido-max-work-directory-list  30)
;; (setq ido-max-work-file-list       50)
;; (setq ido-save-directory-list-file "~/.config/emacs/ido.last")

;; (setq ido-ignore-extensions t)
(setq ido-ignore-buffers '("\\` " "^\*Mess" "^\*Back" ".*Completion" "^\*Ido" "^\*trace" "^\*compilation" "^\*GTAGS" "^session\.*" "^\*"))

(setq-default ido-work-directory-list '("~/"))
(setq-default ido-case-fold             t)
(setq-default ido-use-filename-at-point nil)
(setq-default ido-use-url-at-point      nil)
(setq-default ido-enable-flex-matching  t)
(setq-default ido-max-prospects         8)
(setq-default ido-confirm-unique-completion t)
(setq-default ido-auto-merge-work-directories-length -1) ; Do not try to find a file outside current directory in case given filename matches nothing; just open a new file!

(setq-default confirm-nonexistent-file-or-buffer nil)

(global-set-key (kbd "C-b")  'ido-switch-buffer)
(global-set-key (kbd "M-s")  'ido-write-file)
;; (global-set-key (kbd "C-w")  'ido-kill-buffer)
(global-set-key (kbd "C-o")  'ido-find-file)
(global-set-key (kbd "M-o")  'bookmark-bmenu-list)
;; }}}

;; {{{ Language-based modes
(autoload 'pkgbuild-mode "pkgbuild-mode.el" "PKGBUILD mode." t)

(setq-default default-major-mode 'text-mode)
(add-to-list 'auto-mode-alist '("/mutt"      . mail-mode))
(add-to-list 'auto-mode-alist '("\\.*rc$"    . conf-unix-mode))
(add-to-list 'auto-mode-alist '("rc$"        . conf-unix-mode))
(add-to-list 'auto-mode-alist '("/PKGBUILD$" . pkgbuild-mode))
(add-to-list 'auto-mode-alist '("\.bashrc$"  . shell-script-mode))
(add-to-list 'auto-mode-alist '("\.profile$" . shell-script-mode))
(add-to-list 'auto-mode-alist '("\.chs$"     . haskell-mode))
;(add-to-list 'auto-mode-alist '("\.ino$"     . c-mode))

; Haskell
;(add-to-list 'load-path "~/.emacs.d/elpa/haskell-mode-2.8.0")
;(autoload 'haskell-mode          "haskell-mode" "Major mode for editing Haskell scripts." t)
;(autoload 'literate-haskell-mode "haskell-mode" "Major mode for editing literate Haskell scripts." t)

;(add-hook 'haskell-mode-hook 'turn-on-haskell-doc-mode)
;(add-hook 'haskell-mode-hook 'turn-on-haskell-indentation)
;;(add-hook 'haskell-mode-hook 'turn-on-haskell-indent)
;;(add-hook 'haskell-mode-hook 'turn-on-haskell-simple-indent)

;; (setq auto-mode-alist (append auto-mode-alist '(
   ;; ("\\.[hg]s$"  . haskell-mode)
   ;; ("\\.hic?$"   . haskell-mode)
   ;; ("\\.hsc$"    . haskell-mode)
   ;; ("\\.l[hg]s$" . literate-haskell-mode))))

; C/C++/Java
;(setq c-default-style '(
;    (java-mode . "java")
;    (awk-mode .  "awk")
;    (other .     "linux")))

;(setq         c-indent-level 4)             ; TAB = 4 spaces
;(setq-default c-toggle-electric-flag nil)

(add-hook 'c-mode-common-hook (lambda ()
    (font-lock-add-keywords nil '(("\\<\\(FIXME\\|TODO\\|BUG\\):" 1 font-lock-warning-face t)))))
;; }}}

;; {{{ Term mode
;(require 'term)
(add-to-list 'load-path "/home/koral/.emacs.d/elpa/multi-term-0.8.8")
(autoload 'multi-term "multi-term" nil t)
(eval-after-load "multi-term" '(progn
    (setq multi-term-program "/bin/bash")
    (setq multi-term-scroll-to-bottom-on-output "this")))
;; }}}

;; {{{ Mode-line
(set-face-background 'mode-line "#111111")
(set-face-foreground 'mode-line "#aaaaff")
(setq-default mode-line-format (list
    ;; insert vs overwrite mode, input-method in a tooltip
    " " '(:eval (propertize (if overwrite-mode "Ovr" "Ins")
            'face 'font-lock-preprocessor-face
            'help-echo (concat "Buffer is in " (if overwrite-mode "overwrite" "insert") " mode")))

    ;; was this buffer modified since the last save?
    '(:eval (when (buffer-modified-p)
              (concat ","  (propertize "Mod" 'face 'font-lock-warning-face))))

    ;; is this buffer read-only?
    '(:eval (when buffer-read-only
              (concat ","  (propertize "RO" 'face 'font-lock-type-face))))

    ;; the buffer name; the file name as a tool tip
    " | " (propertize "%b " 'face 'font-lock-keyword-face)

    ;; line and column
    " | " (propertize "%04l" 'face 'font-lock-type-face)
    "," (propertize "%03c" 'face 'font-lock-type-face)

    ;; relative position, size of file
    " | " (propertize "%p" 'face 'font-lock-type-face)
    "/" (propertize "%I" 'face 'font-lock-constant-face)

    ;; the current major mode for the buffer.
    " | " (propertize "%m" 'face 'font-lock-string-face)
    " /" minor-mode-alist

    " | %Z %e %[ %-"))
;; }}}

;; {{{ Keys
(global-set-key (kbd "<f12>")       'multi-term)
;; }}}

;; {{{ IDE
(setq compilation-ask-about-save nil)
(setq compilation-save-buffers-predicate '(lambda () nil))
;; }}}

;; {{{ Hooks
(add-hook 'after-save-hook 'executable-make-buffer-file-executable-if-script-p)
(add-hook 'before-save-hook 'whitespace-cleanup)
(add-hook 'before-save-hook 'dos2unix)
;; }}}

;; {{{ Folding
(add-hook 'c-mode-common-hook   'hs-minor-mode)
(add-hook 'emacs-lisp-mode-hook 'hs-minor-mode)
(add-hook 'haskell-mode-hook    'hs-minor-mode)
(add-hook 'java-mode-hook       'hs-minor-mode)
(add-hook 'lisp-mode-hook       'hs-minor-mode)
(add-hook 'perl-mode-hook       'hs-minor-mode)
(add-hook 'sh-mode-hook         'hs-minor-mode)

(global-set-key (kbd "<f2>")  'hs-toggle-hiding)
(global-set-key (kbd "<f3>")  'hs-hide-all)
(global-set-key (kbd "<f4>")  'hs-show-all)
;; }}}

;; {{{ Theme
(load-theme 'solarized-dark t)
(add-to-list 'default-frame-alist '(background-color . "#000011"))
(add-to-list 'default-frame-alist '(background-mode  . dark))
(add-to-list 'default-frame-alist '(cursor-color     . "#00ff00"))
(add-to-list 'default-frame-alist '(cursor-type      . bar))
(add-to-list 'default-frame-alist '(font             . "Inconsolata-12"))
(add-to-list 'default-frame-alist '(mouse-color      . "#007700"))
(add-to-list 'default-frame-alist '(alpha            . 90))
;; }}}
