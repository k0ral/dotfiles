#unicode_start



# Keybindings {{{
if [[ "$TERM" != emacs ]]; then
[[ -z "$terminfo[kdch1]" ]] || bindkey -M emacs "$terminfo[kdch1]" delete-char
[[ -z "$terminfo[khome]" ]] || bindkey -M emacs "$terminfo[khome]" beginning-of-line
[[ -z "$terminfo[kend]" ]] || bindkey -M emacs "$terminfo[kend]" end-of-line
[[ -z "$terminfo[kich1]" ]] || bindkey -M emacs "$terminfo[kich1]" overwrite-mode
[[ -z "$terminfo[kdch1]" ]] || bindkey -M vicmd "$terminfo[kdch1]" vi-delete-char
[[ -z "$terminfo[khome]" ]] || bindkey -M vicmd "$terminfo[khome]" vi-beginning-of-line
[[ -z "$terminfo[kend]" ]] || bindkey -M vicmd "$terminfo[kend]" vi-end-of-line
[[ -z "$terminfo[kich1]" ]] || bindkey -M vicmd "$terminfo[kich1]" overwrite-mode

[[ -z "$terminfo[cuu1]" ]] || bindkey -M viins "$terminfo[cuu1]" vi-up-line-or-history
[[ -z "$terminfo[cuf1]" ]] || bindkey -M viins "$terminfo[cuf1]" vi-forward-char
[[ -z "$terminfo[kcuu1]" ]] || bindkey -M viins "$terminfo[kcuu1]" vi-up-line-or-history
[[ -z "$terminfo[kcud1]" ]] || bindkey -M viins "$terminfo[kcud1]" vi-down-line-or-history
[[ -z "$terminfo[kcuf1]" ]] || bindkey -M viins "$terminfo[kcuf1]" vi-forward-char
[[ -z "$terminfo[kcub1]" ]] || bindkey -M viins "$terminfo[kcub1]" vi-backward-char

# ncurses fogyatekos
[[ "$terminfo[kcuu1]" == "O"* ]] && bindkey -M viins "${terminfo[kcuu1]/O/[}" vi-up-line-or-history
[[ "$terminfo[kcud1]" == "O"* ]] && bindkey -M viins "${terminfo[kcud1]/O/[}" vi-down-line-or-history
[[ "$terminfo[kcuf1]" == "O"* ]] && bindkey -M viins "${terminfo[kcuf1]/O/[}" vi-forward-char
[[ "$terminfo[kcub1]" == "O"* ]] && bindkey -M viins "${terminfo[kcub1]/O/[}" vi-backward-char
[[ "$terminfo[khome]" == "O"* ]] && bindkey -M viins "${terminfo[khome]/O/[}" beginning-of-line
[[ "$terminfo[kend]" == "O"* ]] && bindkey -M viins "${terminfo[kend]/O/[}" end-of-line
[[ "$terminfo[khome]" == "O"* ]] && bindkey -M emacs "${terminfo[khome]/O/[}" beginning-of-line
[[ "$terminfo[kend]" == "O"* ]] && bindkey -M emacs "${terminfo[kend]/O/[}" end-of-line
fi

bindkey -e

bindkey "\e[1~" beginning-of-line # Home
bindkey "\e[4~" end-of-line # End
bindkey "\e[5~" beginning-of-history # PageUp
bindkey "\e[6~" end-of-history # PageDown
bindkey "\e[2~" quoted-insert # Ins
bindkey "\e[3~" delete-char # Del
bindkey "\e[5C" forward-word
bindkey "\eOc" emacs-forward-word
bindkey "\e[5D" backward-word
bindkey "\eOd" emacs-backward-word
bindkey "\e\e[C" forward-word
bindkey "\e\e[D" backward-word
# for rxvt
bindkey "\e[7~" beginning-of-line # Home
bindkey "\e[8~" end-of-line # End
# for non RH/Debian xterm, can't hurt for RH/Debian xterm
bindkey "\eOH" beginning-of-line
bindkey "\eOF" end-of-line
# for freebsd console
bindkey "\e[H" beginning-of-line
bindkey "\e[F" end-of-line

bindkey "^[[A" history-search-backward
bindkey "^[[B" history-search-forward
# }}}

# Completion {{{
setopt complete_in_word
setopt always_to_end

autoload -U compinit && compinit
#autoload -U bashcompinit; bashcompinit  # Support for bash completion
zmodload -i zsh/complist

zstyle ':completion:*'                      use-perl=1
zstyle ':completion:*'                      menu select=2

# If case sensitive fails, try case insensitive
zstyle ':completion:*'                      matcher-list 'm:{a-z}={A-Z}'

# Have all different types of matches displayed separately
zstyle ':completion:*'                      group-name ''

# Ignore completion functions for commands you donâ€™t have
zstyle ':completion:*:functions'            ignored-patterns '_*'

# Description text
zstyle ':completion:*'                      select-prompt %SScrolling active: current selection at %p%s
zstyle ':completion:*:descriptions'         format $'%{- \e[38;5;137;1m\e[48;5;234m%}%B%d%b%{\e[m%}'
zstyle ':completion:*:warnings'             format $'%{No match for \e[38;5;240;1m%}%d%{\e[m%}'

# Remove trailing slashes
zstyle ':completion:*'                      squeeze-slashes true

# Use cache
zstyle ':completion:*'                      use-cache on
zstyle ':completion:*'                      cache-path ~/.config/zsh/cache

# Prevent CVS files/directories from being completed
zstyle ':completion:*:(all-|)files'         ignored-patterns '(|*/)CVS'

# Allow mistakes
zstyle ':completion:*'                      completer _complete _match _approximate
zstyle ':completion:*:match:*'              original only
#zstyle ':completion:*:approximate:*'       max-errors 1 numeric
zstyle -e ':completion:*:approximate:*'     max-errors 'reply=($((($#PREFIX+$#SUFFIX)/3))numeric)'
zstyle ':completion:*'                      accept-exact '*(N)'     # Take the first part of the path to be exact

# Colors
zstyle ':completion:*'                      list-colors ${(s.:.)LS_COLORS}

# Do not show already selected elements
zstyle ':completion:*:rm:*' ignore-line yes
zstyle ':completion:*:mv:*' ignore-line yes
zstyle ':completion:*:cp:*' ignore-line yes

# PID completion
zstyle ':completion:*:*:kill:*:processes'   list-colors "=(#b) #([0-9]#) ([0-9a-z-]#)*=01;34=0=01"
zstyle ':completion:*:*:kill:*'             menu yes select
zstyle ':completion:*:kill:*'               force-list always
zstyle ':completion:*:*:killall:*'          menu yes select
zstyle ':completion:*:killall:*'            force-list always
zstyle ':completion:*:*:*:*:processes'      command "ps -u `whoami` -o pid,user,comm -w -w"
zstyle ':completion:*:processes-names'      command 'ps -awxho command'

# cd completion
#zstyle ':completion:*:cd:*'                ignore-parents parent pwd
zstyle ':completion:*:cd:*'                 tag-order local-directories directory-stack path-directories
zstyle ':completion:*:cd:*'                 ignored-patterns '(*/)#CVS'

# ssh completion
zstyle ':completion:*:scp:*'                group-order users files all-files hosts-domain hosts-host hosts-ipaddr
zstyle ':completion:*:ssh:*'                tag-order users 'hosts:-host hosts:-domain:domain hosts:-ipaddr:IP\ address *'
zstyle ':completion:*:ssh:*'                group-order hosts-domain hosts-host users hosts-ipaddr
zstyle ':completion:*:(ssh|scp):*:hosts-host'   ignored-patterns '*.*' loopback localhost
zstyle ':completion:*:(ssh|scp):*:hosts-domain' ignored-patterns '<->.<->.<->.<->' '^*.*' '*@*'
zstyle ':completion:*:(ssh|scp):*:hosts-ipaddr' ignored-patterns '^<->.<->.<->.<->' '127.0.0.<->'

# sudo completion
zstyle ':completion:*:sudo:*' command-path /usr/local/sbin /usr/local/bin /usr/sbin /usr/bin /sbin /bin /usr/X11R6/bin

# xdvi completion
zstyle ':completion:*:*:xdvi:*'             menu yes select
zstyle ':completion:*:*:xdvi:*'             file-sort time

# apvlv completion
zstyle ':completion:*:*:apvlv:*'            file-patterns '*.pdf'

# mplayer completion
zstyle ':completion:*:*:mplayer:*'          tag-order files
zstyle ':completion:*:*:mplayer:*'          file-patterns   \
    '*.(rmvb|mkv|mpg|wmv|mpeg|avi|flv|mp3|mp4|flac|ogg):video' \
    '*:all-files' '*(-/):directories'

# hosts completion
[ -r ~/.ssh/known_hosts ] && _ssh_hosts=(${${${${(f)"$(<$HOME/.ssh/known_hosts)"}:#[\|]*}%%\ *}%%,*}) || _ssh_hosts=()
hosts=(
  "$_ssh_hosts[@]"
  `hostname`
  localhost
)
zstyle ':completion:*:hosts' hosts $hosts

# Users completion: don't complete uninteresting users, unless we really want to
zstyle ':completion:*:*:*:users' ignored-patterns adm amanda apache aurbuild avahi beaglidx bin cacti canna clamav courier cron daemon dbus distcache dnsmasq dovecot fax fetchmail ftp games gdm gkrellmd gopher hacluster hal halt hsqldb http ident junkbust ldap lp mail mailman mailnull mldonkey mpd mysql nagios named netdump news nfsnobody nobody nscd ntp nut nx openvpn operator pcap polipo postfix postgres privoxy pulse pvm quagga radvd rpc rpcuser rpm rtkit shutdown squid sshd sync usbmux uucp vcsa xfs
zstyle '*' single-ignored show

# }}}

# Aliases {{{
alias cp='cp -v'
alias mkdir='mkdir -p -v'
alias mv='mv -v'
alias rm='safe-rm -v'

alias l='ls -l'
alias la='ls -a'
alias ll='ls -l'
alias lla='ls -la'
alias ls='ls --tabsize=0 --literal --color=auto --show-control-chars --human-readable --group-directories-first -X'

alias df='df -hT'
#alias df="cdf -h"
#alias du='du -chs'

alias diff="colordiff"
alias egrep='egrep --color=auto'
alias fgrep='fgrep --color=auto'
alias gcc="colorgcc"
#alias grep='grep --color=auto'
#alias make="colormake"

alias gdb="cgdb -q"
alias mutt='mutt -y'
alias octave="octave -q"

alias -g grep='ack'
alias more='vimpager'
alias less='vimpager'
alias top="htop"

alias o='xdg-open'

alias reco='sudo dhclient eth0'
#alias startx='startx & vlock'
alias my_indent='indent -bad -bap -bbo -bc -nbfda -br -brs -cbi0 -cdb -cdw -ce -ncs -di4 -fca -hnl -i4 -ip4 -l120 -lp -nlps -npcs -nprs -npsl -saf -sai -saw -sbi4 -sc -nsob -ss -ts4 -nut '

alias _="sudo"

alias http-on="sudo /etc/rc.d/lighttpd start"
alias http-off="sudo /etc/rc.d/lighttpd stop"
alias mysql-on="sudo /etc/rc.d/mysqld start"
alias mysql-off="sudo /etc/rc.d/mysqld stop"
alias bluetooth-on="sudo /etc/rc.d/bluetooth start"
alias bluetooth-off="sudo /etc/rc.d/bluetooth stop"
alias mpd-on="sudo /etc/rc.d/mpd start"
alias mpd-off="sudo /etc/rc.d/mpd stop"
alias wifi-on="sudo /etc/rc.d/net-auto-wireless start"
alias wifi-off="sudo /etc/rc.d/net-auto-wireless stop"
alias cups-on="sudo /etc/rc.d/cupsd start"
alias cups-off="sudo /etc/rc.d/cupsd stop"

alias openports='sudo netstat --all --numeric --programs --inet'
alias wifiselect='sudo wifi-select wlan0'
alias uzbl='uzbl-browser'
alias pingg='ping www.google.fr'
alias volume='alsamixer -c 0'

alias wtf='dmesg'
alias rtfm='man'
alias :q='exit'

if [ $UID -ne 0 ]; then
    alias reboot='sudo reboot'
    alias halt='sudo halt'
    alias upgrade='yaourt -Syu && sudo diffpac'
    alias remove='sudo pacman-color -Rs'
    alias netcfg='sudo netcfg2'
fi
# }}}

# Helpers {{{
lsmount() { (echo "DEVICE PATH TYPE FLAGS" && mount | awk '$2=$4="";1') | column -t; }
wiki() { dig +short txt $1.wp.dg.cx; }

function maketex() {
    if [ "$1" == "" ]; then
        FILE="paper";
    else
        FILE=`echo $1 | sed -e 's/..*//'`;
    fi
    if [ -f $FILE.tex ]; then
        pdflatex $FILE.tex;
        bibtex $FILE.aux;
        makeindex $FILE;
        pdflatex $FILE.tex;
        bibtex $FILE.aux;
        makeindex $FILE;
        #latex $FILE.tex && dvipdf $FILE.dvi;
        #latex $FILE.tex && dvips -Ppdf -G0 $FILE.dvi -o $FILE.ps && ps2pdf14 $FILE.ps;
    fi
}

xdvi() { command xdvi ${*:-*.dvi(om[1])} }
# }}}

# {{{ History
setopt append_history           # Shared history for all shells
unsetopt extended_history       # Do not save extra information like timestamp
setopt hist_ignore_dups
setopt hist_ignore_space        # Do not save commands that start with a space
setopt inc_append_history
setopt hist_reduce_blanks
setopt hist_verify              # Using '!', the command isn't immediately executed
setopt share_history
# }}}

# Options {{{
setopt auto_cd  
#setopt correctall              # Correction of writing errors (ex: sl => ls)
setopt auto_pushd pushd_minus pushd_silent pushd_to_home pushd_ignore_dups
unsetopt cdablevars
#setopt ignoreeof               #   Prevent from using Ctrl + d
setopt interactivecomments
#setopt nobanghist
setopt noclobber
setopt SH_WORD_SPLIT
setopt nohup
setopt chase_links              #   Traite les liens symboliques comme il faut

setopt extendedglob             #   Use regexp in commands (ex : cp ^*.(tar|bz2|gz))

# No beeps at all !
unsetopt beep
unsetopt hist_beep
unsetopt list_beep

# Si on utilise des jokers dans une liste d'arguments, retire les jokers
# qui ne correspondent Ã  rien au lieu de donner une erreur
setopt nullglob

unalias run-help
autoload run-help

# Inline completion
# }}}

# Sleep mode {{{
sleep-on () {
    sudo /etc/rc.d/fcron stop
    sudo /etc/rc.d/wicd stop
}
# }}}

# {{{ Support for ..../ 
rationalise-dot() {
    if [[ $LBUFFER = *.. ]]; then
        LBUFFER+=/..
    else
        LBUFFER+=.
    fi
}

zle -N rationalise-dot
bindkey . rationalise-dot
# }}}

# {{{ List/delete empty folders
ls-empty() {
    find . -type d -empty -print0 | xargs --null ls
}

rm-empty() {
    find . -type d -empty -print0 | xargs --null rmdir
}
# }}}
